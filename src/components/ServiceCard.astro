---
interface Props {
  image: string;
  title: string;
  description: string;
  id?: string; // Add an optional ID for unique targeting
}
const { image, title, description, id } = Astro.props;
const uniqueId = id || `card-${Math.random().toString(36).substring(2, 9)}`;
---

<div class="relative">
  <div
    class="card relative rounded-xl shadow-xl overflow-hidden
           transition-all duration-300 ease-in-out cursor-pointer"
    id={uniqueId}
    data-card-id={uniqueId} >
    <div
      class="image-area relative h-48 sm:h-56 bg-cover bg-center"
      style={`background-image: url('${image}');`}
      tabindex="0"
      role="button"
      aria-label={`Mostrar detalles de ${title}`}
    >
      <div class="absolute inset-0 bg-black opacity-0 transition-opacity duration-300"></div>

      <h2 class="absolute inset-x-0 bottom-0 p-4 text-xl font-bold text-center text-white bg-gradient-to-t from-black/80 via-black/40 to-transparent">
        {title}
      </h2>
    </div>

    <div class="description-content bg-white/80 p-4 text-gray-800 flex items-center justify-center text-center
                 max-h-0 opacity-0 overflow-hidden
                 transition-[max-height,opacity] duration-500 ease-in-out">
      <p class="text-md text-justify leading-relaxed">{description}</p>
    </div>

  </div>
</div>

<script is:inline>
  (() => {
    const cardElement = document.querySelector(`[data-card-id="${uniqueId}"]`);

    if (!cardElement) {
      console.warn('Card element not found for ID:', uniqueId);
      return;
    }
    const imageArea = cardElement.querySelector('.image-area');
    const descriptionContent = cardElement.querySelector('.description-content');
    // Function to apply active styles
    function activateCard() {
      // Deactivate other active cards if they exist (optional: ensures only one card is open)
      document.querySelectorAll('.card.is-active').forEach(otherCard => {
        if (otherCard !== cardElement) {
          otherCard.classList.remove('is-active');
        }
      });
      cardElement.classList.add('is-active');
    }
    // Function to deactivate card
    function deactivateCard() {
      cardElement.classList.remove('is-active');
    }
    // --- Click to toggle 'is-active' class ---
    imageArea.addEventListener('click', (event) => {
      event.stopPropagation(); // Prevent clicks from bubbling up
      if (cardElement.classList.contains('is-active')) {
        deactivateCard();
      } else {
        activateCard();
      }
    });
    // --- Close card if clicked outside ---
    document.addEventListener('click', (event) => {
      if (cardElement.classList.contains('is-active') && !cardElement.contains(event.target)) {
        deactivateCard();
      }
    });
    // --- Handle hover behavior ---
    cardElement.addEventListener('mouseenter', () => {
      if (!cardElement.classList.contains('is-active')) {
        cardElement.classList.add('is-hovering');
      }
    });

    cardElement.addEventListener('mouseleave', () => {
      if (!cardElement.classList.contains('is-active')) { // Only remove if not active from click
        cardElement.classList.remove('is-hovering');
      }
    });
  })();
</script>

<style is:global>
  /*
    Styles for when the card is hovered OR when it has the 'is-active' class
  */
  .card:hover,
  .card.is-hovering,
  .card.is-active {
    transform: scale(1.05);
    box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25); /* Tailwind's shadow-2xl */
    z-index: 50;
  }

  /*
    Styles for the description content.
  */
  .card:hover .description-content,
  .card.is-hovering .description-content,
  .card.is-active .description-content {
    max-height: 24rem !important;
    opacity: 1 !important;
  }

  /*
    Styles for the image overlay.
  */
  .card:hover .bg-black,
  .card.is-hovering .bg-black,
  .card.is-active .bg-black {
    opacity: 0.4 !important;
  }
</style>
